# GET /api/brands
# GET /api/brands/:id/products
# GET /api/products

# POST /api/login
# GET /api/me/cart
# POST /api/me/cart
# DELETE /api/me/cart/:productId
# //below means to change the quantity of a product#
# POST /api/me/cart/:productId

openapi: 3.0.0

info:
  title: Sunglasses API
  description: An API for a fictional sunglasses store.
  version: 0.1.9

paths:
  /api/brands:
    get:
      summary: Returns a list of brands.
      description: All brands in the sunglasses store will be listed
      responses:
        "200":
          description: A JSON array of brand names
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Brand"
        default:
          description: Unexpected error

  /api/products:
    get:
      summary: Returns a list of products.
      description: All products in the sunglasses store will be listed
      responses:
        "200":
          description: A JSON array of product names
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        default:
          description: Unexpected error

  /api/brand/{id}/products:
    get:
      summary: Returns a list of products by brand id.
      parameters:
        - name: id
          in: path
          required: true
          description: The id of a given brand
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: A JSON array of brand products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: The specified brand id is not valid (not a number).
        "404":
          description: The specified brand was not found.
        default:
          description: Unexpected error

  /api/login/:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: userId
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied

  /api/me/cart:
    get:
      summary: Gets the cart of a logged in user.

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CartItem"

        "400":
          description: The specified person id is not valid (not a number).
        "404":
          description: The specified person's cart was not found.
        default:
          description: Unexpected error

    post:
      tags:
        - product
      summary: Add product
      description: Add a new product to the cart
      operationId: addProduct
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CartItem"
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
        "405":
          description: Invalid input

      requestBody:
        description: Add a new product to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
          application/xml:
            schema:
              $ref: "#/components/schemas/CartItem"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CartItem"

  /api/me/cart/{productId}:
    delete:
      tags:
        - product
      summary: Delete product order by ID
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found

    post:
      tags:
        - product
      summary: Updates product
      description: "Updates product"
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: ID of the order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64

      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CartItem"
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
        "405":
          description: Invalid input

      requestBody:
        description: Update a product in the cart
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
          application/xml:
            schema:
              $ref: "#/components/schemas/CartItem"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CartItem"

  # /api/user:
  #   post:
  #     tags:
  #       - user
  #     summary: Create user
  #     description: User profile for repeat customers
  #     operationId: createUser
  #     responses:
  #       default:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #       description: Created user object

components:
  schemas:
    # User:
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #       example: 10
    #     username:
    #       type: string
    #       example: theUser
    #     firstName:
    #       type: string
    #       example: John
    #     lastName:
    #       type: string
    #       example: James
    #     email:
    #       type: string
    #       example: john@email.com
    #     password:
    #       type: string
    #       example: 12345
    #     phone:
    #       type: string
    #       example: 12345
    #     userStatus:
    #       type: integer
    #       format: int32
    #       example: 1
    #       description: User Status
    #   xml:
    #     name: customer
    #   type: object

    Brand:
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Bodega
      xml:
        name: category
      type: object

    Product:
      properties:
        id:
          type: integer
          format: int64
          example: 4
        name:
          type: string
          example: Oakley Black Sunglasses
        description:
          type: string
          example: Impress your friends with the latest cool glasses by Oakley.
        price:
          type: integer
          example: 85
        categoryId:
          type: integer
          example: 5
        imageUrls:
          type: string
          example: http://myimage.com
      xml:
        name: category
      type: object

      required:
        - id
        - name
        - description
        - cost
        - brandId
        - imageURL

    CartItem:
      type: object
      properties:
        id:
          type: integer
          example: 9
        name:
          type: string
          example: Kate Spade sunglasses
        cost:
          type: integer
          example: 45
