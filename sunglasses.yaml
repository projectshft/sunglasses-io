swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Sunglasses.io"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3001"
basePath: "/api"
tags:
- name: "brands"
  description: "Access products by brand"
- name: "products"
  description: "Access individual products"
- name: "me"
  description: "User actions"
- name: "login"
  description: "login"
schemes:
- "http"
paths:
  /brands:
    get:
      tags:
      - "brands"
      summary: "Get list of available brands"
      description: ""
      operationId: "getBrands"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema: 
            type: "array"
            items:
              $ref: "#/definitions/Brand"
        500:
          description: "Internal Server Error"
      security:
      - api_key: []
  /brands/{id}/products:
    get:
      tags:
      - "brands"
      summary: "Get products by brand"
      operationId: "getProductsByBrand"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of brand to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Brand"
        400:
          description: "Invalid status value"
      security:
      - api_key: []
  /products:
    get:
      tags:
      - "products"
      summary: "Search products by name"
      operationId: "findProductsByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "search term"
        in: "query"
        description: "Search term to filter by"
        required: true
        type: "string"
        format: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Products"
        404:
          description: "No products found that match your search"
      security:
      - api_key: []    
  /login:
    post:
      tags:
      - "login"
      summary: "User login"
      description: "Logs a user in"
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "User login info"
        description: "User login object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Brand"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
  /me/cart/:
    get:
      tags:
      - "me"
      summary: "Get cart contents"
      description: ""
      operationId: "getCart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Brand"
        404:
          description: "Cart not found"
      security:
      - api_key: []
    post:
      tags:
      - "me"
      summary: "Add a product to the cart"
      description: ""
      operationId: "addProductToCart"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /me/cart/{productId}:
    delete:
      tags:
      - "me"
      summary: "Delete a product from the cart"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Brand"
        404:
          description: "Item not found"
      security:
      - api_key: []
    post:
      tags:
      - "me"
      summary: "Edit cart contents" 
      description: "Update quantity of an existing item in the cart"
      operationId: "editCartById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of the cart item to be updated."
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Brand"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Item not found"
      security:
      - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Brand:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
    xml:
      name: "Brand"
  Products:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"