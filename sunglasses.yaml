swagger: '2.0'
info:
  title: Sunglasses.io API
  description: Sunglasses.io web store API
  version: 0.0.1
host: 'localhost:8080'
schemes:
  - http
basePath: /api
produces:
  - application/json
paths:
  /products:
    get:
      summary: All products
      description: |
        Returns an array of available product types.
      parameters:
        - name: product
          in: query
          description: Product query
          required: true
          type: string
          format: string
      tags:
        - products
      responses:
        '200':
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /brands:
    get:
      summary: All brands
      description: |
        Returns an array of available brands.
      parameters:
        - name: brandName
          in: query
          description: An array of brands
          required: true
          type: string
      tags:
        - brands
      responses:
        '200':
          description: An array of brands
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
        '400':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/brands/{id}/products':
    get:
      summary: All products for a given brand
      description: |
        Returns all products for a given brand.
      operationId: getProductsByBrand
      parameters:
        - name: id
          in: path
          description: ID of brand
          required: true
          type: integer
          format: int64
      tags:
        - brands
      responses:
        '200':
          description: An object
          schema:
            type: object
            items:
              $ref: '#/definitions/Brand'
        '400':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      summary: User login
      description: >-
        The User Login endpoint allows an existing user to sign in.
      operationId: userLogin
      parameters: 
      - name: username
        in: query
        description: username and pw return access token
        required: true
        type: string
      - name: password
        in: query
        description: username and pw return access token
        required: true
        type: string
      tags:
        - login
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Login'
        default:
          description: invalid username/password
          schema:
            $ref: '#/definitions/Error'
  /me/cart:
    get:
      summary: View a user's cart
      operationId: getCart
      description: >-
        The cart endpoint allows fetching of a user's cart.
      tags:
        - cart
      parameters: 
      - name: id
        in: path
        description: the id of the user's cart to retrieve
        required: true
        type: string
      responses:
        '200':
          description: cart information for a user
          schema:
            $ref: '#/definitions/Cart'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Add a user's cart
      operationId: postCart
      description: >-
        The cart post endpoint allows adding a user's cart.
      tags:
        - cart
      responses:
        '200':
          description: cart information for a user
          schema:
            $ref: '#/definitions/Cart'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/me/cart/{productId}':
    delete:
      summary: Remove product from a user's cart
      description: |
        Remove a product from a user's cart
      parameters:
        - name: productId
          in: path
          description: ID of a product to remove
          required: true
          type: integer
          format: int64
      tags:
        - cart
      responses:
        '200':
          description: An object
          schema:
            type: object
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Add product to a user's cart
      description: |
        Add a product to a user's cart
      parameters:
        - name: productId
          in: path
          description: ID of a product to remove
          required: true
          type: integer
          format: int64
      tags:
        - cart
      responses:
        '200':
          description: An object
          schema:
            type: object
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Product:
    type: object
    properties:
      productName:
        type: string
        description: unique product name
      id: 
        type: integer
        description: unique product ID
      description: 
        type: string
        description: description of the product
      price: 
        type: integer
        description: price of product
      imageUrl: 
        type: string
        description: location of the product image
  Brand:
    type: object
    properties:
      brandName: 
        type: string
        description: unique brand name
      id:
        type: integer
        description: uniquie brand id
  Login:
    type: object
    properties:
      username:
        type: string
        description: username
      password:
        type: string
        description: password
  Cart:
    type: object
    properties:
      quantity:
        type: integer
        description: number of items in the cart
      contents:
        type: array
        items: 
          $ref: '#/definitions/Product'
        description: array of the contents of the cart
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
