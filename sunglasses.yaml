swagger: "2.0"
info:
  description: "This is a sunglass purchasing server.  You can purchase sunglasses using this api so go forth and protect those retinas"
  version: "1.0.0"
  title: "Sunglasses.io"
  contact:
    email: "ahhardin@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3001"
basePath: "/api"
tags:
- name: "brands"
  description: "Sunglass brands"
- name: "products"
  description: "Sunglass products"
- name: "user"
  description: "User operations"
schemes:
- "http"
paths:
  /brands:
    get:
      tags:
      - "brands"
      summary: Brands
      description: |
        The products endpoint returns an array of product objects containing the product id, brand id, name, description, price, and image url.
      operationId: "getBrands"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/product"
  /brands/{id}/products:
    get:
      tags:
      - "brands"
      summary: "Finds sunglasses by brand"
      description: |
        The brands/id/product endpoint returns an array of product objects that are associated with a particlar brand
      operationId: "getProductsByBrand"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "brand id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/product"
        400:
          description: "Invalid brand id value"
  /products:
    get:
      tags:
      - "products"
      summary: All Products
      description: |
        The brands endpoint returns an array of brand objects containing the brand id and name.
      operationId: "getAllProducts"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/brand"
  /products/{productId}:
    get:
      tags:
      - "products"
      summary: "Finds sunglasses by product id"
      description: |
        The product/{productId} endpoint returns a single product object by id
      operationId: "getProductById"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "brand id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/product"
        400:
          description: "Invalid brand id value"
  /login:
    post:
      tags:
      - "user"
      summary: "Login"
      description: "Allows a user to submit their username and password to be authenticated into the system so they can buy some sunglasses and possibly save the world."
      operationId: "Login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "object containing username and password"
        required: true
        schema:
          type: "object"
          items:
            $ref: "#/definitions/credentials"
      responses:
        200:
          description: "successful operation"
        400:
          description: "please enter both your username and password"
        401:
          description: "unauthenticated user" #i couldn't enter multiple 401 codes so I'm just putting this generic one
  /me/cart:
    get:
      tags:
      - "user"
      summary: "User's Cart"
      description: "Returns the cart of the logged in user"
      operationId: "getCart"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
        401:
          description: "Session Expired, please login again"
    delete:
      tags:
      - "user"
      summary: "Empty Cart"
      description: "Empty logged in user's cart"
      operationId: "emptyCart"
      produces:
      - "application/json"
      responses:
        200: 
          description: "successful operation"
        401:
          description: "Session Expired, please login again"
  /me/cart/{productId}:
    post:
      tags:
      - "user"
      summary: "Add item"
      description: "Add item to a user's cart"
      operationId: "addItem"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to be added"
        required: true
        type: integer
      responses:
        200:
          description: "successful operation"
        401:
          description: "Session Expired, please login again"
        404:
          description: "Invalid Product Id"
    delete:
      tags:
      - "user"
      summary: "Delete Item"
      description: "Delete item from cart"
      operationId: "deleteCartItem"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "brand id"
        required: true
        type: integer
      responses:
        200: 
          description: "successful operation"
        401:
          description: "Session Expired, please login again"
        404:
          description: "Invalid Product Id"
definitions:
  brand:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "string"
  product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "string"
      categoryId:
        type: "integer"
        format: "int64"
      description:
        type: "string"
        format: "description"
      price:
        type: "number"
        format: "float"
      imageUrl:
  credentials:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
