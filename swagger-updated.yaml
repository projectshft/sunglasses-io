swagger: "2.0"
info:
  version: "1.0.0"
  title: "E-Commerce API"
  description: "API for managing brands, products, and user cart"
host: "localhost:3000"
schemes:
  - "http"
basePath: "/api"
produces:
  - "application/json"
tags:
  - name: brands
    description: Brands carried in store
  - name: products
    description: Products carried in store
  - name: user
    description: Everything about the user including the user's cart

paths:
  /api/brands:
    get:
      tags:
        - brands
      summary: View all brands carried in store
      description: ""
      operationId: viewBrands
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Brands
          description: Array of brands in store
          schema:
            $ref: "#/definitions/Brands"
      responses:
        "200":
          description: successful
        "404":
          description: unsuccessful
  /api/brands/{brandId}/products:
    get:
      tags:
        - brands
      summary: View all products carried by a specific brand
      description: Retrieve a list of products carried by a specific brand.
      operationId: viewBrandProducts
      parameters:
        - name: brandId
          in: path
          description: ID of the brand to retrieve products for
          required: true
          type: string
      responses:
        "200":
          description: successful
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"

  /api/products:
    get:
      tags:
        - products
      summary: View all products in the store
      description: ""
      operationId: viewProducts
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: successful
          schema:
            type: array # Corrected to an array type
            items:
              $ref: "#/definitions/Product"

  /api/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Expires-After:
              type: string
              format: date-time
            X-Rate-Limit:
              type: integer
              format: int32
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /api/me/cart:
    get:
      tags:
        - user
      summary: Get user's cart
      description: Retrieve the contents of the user's cart
      operationId: getUserCart
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: The username to get the cart for
          required: true
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/UserCart"
        "404":
          description: User not found
    post:
      tags:
        - user
      summary: Create the user's cart and add a product
      description: Add a product to the user's cart or create the cart if it doesn't exist (requires authentication)
      operationId: addUserCart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Product object to add to the cart
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: successful operation
        "401":
          description: Unauthorized (user not logged in)
  /api/me/cart/{productId}:
    delete:
      tags:
        - user
      summary: Remove a product from the user's cart
      description: Remove a product from the user's cart (requires authentication)
      operationId: removeFromUserCart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of the product to be removed
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
        "401":
          description: Unauthorized (user not logged in)
        "404":
          description: User or product not found
    post:
      tags:
        - user
      summary: Add a product to the user's cart
      description: Add a product to the user's cart (requires authentication)
      operationId: addToUserCart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of the product to be added
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
        "401":
          description: Unauthorized (user not logged in)
        "404":
          description: User or product not found

definitions:
  Product:
    type: object
    required:
      - name
      - photoUrl
    properties:
      id:
        type: integer
        format: int64
      price:
        type: integer
        example: 120
      brand:
        $ref: "#/definitions/Brand"
      style:
        type: string
        example: Beach
      description:
        type: string
        example: These sunglasses are good for the beach!
      color:
        type: string
        example: Blue
      photoUrl:
        type: string
        xml:
          wrapped: true
        items:
          type: string
          xml:
            name: photoUrl
      inventory:
        type: integer
        example: 2
  Brand:
    type: object
    properties:
      id:
        type: string
        example: "1"
      name:
        type: string
        example: Oakley
  Brands:
    type: array
    items:
      $ref: "#/definitions/Brand"
  Store:
    type: array
    items:
      $ref: "#/definitions/Product"
  User:
    type: object
    properties:
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
      loggedIn:
        type: boolean
        default: false
        description: Indicates whether the user is logged in or not
    xml:
      name: User
  CartItem:
    type: object
    properties:
      productId:
        type: integer
        format: int64
        description: ID of the product in the cart
      quantity:
        type: integer
        description: Quantity of the product in the cart
    xml:
      name: CartItem
  UserCart:
    type: object
    properties:
      username:
        type: string
        description: The username associated with the cart
      items:
        type: array
        items:
          $ref: "#/definitions/CartItem"
        description: List of items in the cart
    xml:
      name: UserCart
