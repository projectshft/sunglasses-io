swagger: '2.0'
info:
  title: Sunglasses.io API
  description: An API for sunglasses.io that allows users to browse brands and
  products as well as add/update/remove items in the shopping cart.
  version: 0.1 BETA
host: localhost:3001
schemes:
  - http
basePath: /api
produces:
  - application/json
paths:
  /brands:
    get:
      summary: Get a list of brands in the store.
      description: >
        The brands endpoint allows you to access all the of brands in the store.
      parameters:
        - name: maxResults
          in: query
          description: Integer value specifying the maximum number of brands to return. If maxResults exceeds the number of brands, returns all brands. (Default number is 4 based on wireframe.)
          required: false
          type: integer
          format: int32
      tags:
        - Brands
      responses:
        '200':
          description: Success; return an array of brands
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
        '400':
          description: Improperly formatted request
          schema:
            $ref: '#/definitions/Error'
  /brands/{brandId}/products:
    get:
      summary: Get a list of products with the specified brand ID.
      description: >-
        This endpoint returns a list of products associated with a chosen brand ID.
      parameters:
        - name: brandId
          in: path
          description: Brand ID of products to return
          required: true
          type: integer
          format: int64
      tags:
        - Brands
      responses:
        '200':
          description: List of products for a given brand
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '404':
          description: Brand not found
          schema:
            $ref: '#/definitions/Error'
  /products:
    get:
      summary: Get a list of products in the store.
      description: |
        This endpoint allows you to search for products matching a search query.
      parameters:
        - name: query
          in: query
          description: A string by which to search for products
          required: true
          type: string
      tags:
        - Products
      responses:
        '200':
          description: Successful product search
        '400':
          description: Improperly formatted request
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      summary: Allow a user to login.
      description: |
        This endpoint handles user authentication. Upon logging in, a user can access the shopping cart functionality.
      tags:
        - User
      responses:
        '200':
          description: Successful login
        '403':
          description: Exceeded maximum number of attempts
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Invalid username or password
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Incorrectly formatted request
          schema:
            $ref: '#/definitions/Error'
  /me/cart:
    get:
      summary: Get a user's shopping cart 
      description: |
        This endpoint allows a logged in user to get a list of all the items in his/her shopping cart.
      tags:
        - Shopping Cart
      responses:
        '200':
          description: A list of products in a user's shopping cart
        '401':
          description: You need to have access to continue.
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Add an item to the cart.
      description: |
        This endpoint allows products to be added to a user's shopping cart.
      tags:
        - Shopping Cart
      responses:
        '200':
          description: Successful addition to shopping cart
        '401':
          description: You need to have access to continue.
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Incorrectly formatted request
          schema:
            $ref: '#/definitions/Error'
  /me/cart/{productId}:
    post:
      summary: Update quantity of an item in the cart
      description: |
        Update the quantity of a product already in the shopping cart.
      parameters:
        - name: productId
          in: path
          description: The ID for the product to be updated in the cart.
          required: true
          type: number
          format: int32
        - name: quantity
          in: query
          description: Updated quantity value for a product in a user's shopping cart.
          required: true
          type: number
          format: int32
      tags:
        - Shopping Cart
      responses:
        '200':
          description: Successfully updated cart item
        '401':
          description: You need to have access to continue.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: This resource does not exist.
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Incorrectly formatted request
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Remove an item from the cart
      description: |
        Remove a product with the specified product ID if it exists in the shopping cart.
      parameters:
        - name: productId
          in: path
          description: The ID for the product to be updated in the cart.
          required: true
          type: number
          format: int32
      tags:
        - Shopping Cart
      responses:
        '200':
          description: Successfully deleted cart item
        '401':
          description: You need to have access to continue.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: This resource does not exist.
          schema:
            $ref: '#/definitions/Error'
definitions:
  Brand:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for a brand.
      name:
        type: string
        description: The name of the brand.
  Product:
    type: object
    properties:
      id:
        type: string
        description: The unique identifier for a product.
      categoryId:
        type: string
        description: Unique identifier for product's brand.
      name:
        type: string
        description: The name of the product.
      price:
        type: integer
        format: int32
        description: Price in USD.
      imageUrls:
        type: array
        items:
          type: string
  User:
    type: object
    properties:
      gender:
        type: string
        description: User's gender.
      cart:
        type: array
        description: List of items in a user's shopping cart.
        items:
          $ref: '#/definitions/Product'
      name:
        type: object
        description: First name, last name, and title of a user.
        properties:
          title:
            type: string
          first:
            type: string
          last:
            type: string
      location:
        type: object
        description: Address and postal code of the user.
        properties:
          street:
            type: string
          city:
            type: string
          state:
            type: string
          postcode:
            type: integer
            format: int32
      email:
        type: string
      login:
        type: object
        description: User login credentials.
        properties:
          username:
            type: string
          password:
            type: string
          salt:
            type: string
          md5:
            type: string
          sha1:
            type: string
          sha256:
            type: string
      dob:
        type: string
      registered:
        type: string
      phone:
        type: string
      cell:
        type: string
      picture:
        properties:
          large:
            type: string
          medium:
            type: string
          thumbnail:
            type: string
      nat:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
