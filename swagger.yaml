swagger: '2.0'
info:
    version: '1.0.0'
    title: 'E-Commerce API'
    description: 'API for managing brands, products, and user cart'
host: 'localhost:3000'
schemes:
    - 'http'
basePath: '/api'
produces:
    - 'application/json'
tags:
  - name: brands
    description: Brands carried in store
  - name: products
    description: Products carried in store
  - name: user
    description: Everything about the user
securityDefinitions:
  apiKey:
    type: apiKey
    in: header
    name: Authorization

paths:
  /brand:
    post:
      tags:
        - brands
      summary: Add a new brand to the store
      description: ''
      operationId: addBrand
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Add Brand
          description: Store string that needs to be added to products
          required: true
          schema:
            $ref: '#/definitions/Brand'
      responses: 
        '200':
          description: successful
    delete:
      tags:
        - brands
      summary: Delete a brand from the store
      description: ''
      operationId: deleteBrand
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Delete Brand
          description: Store string that needs to be deleted
          required: true
          schema:
            $ref: '#/definitions/Brand'
      responses: 
        '200':
          description: successful
    put:
      tags:
        - brands
      summary: Edit an existing brand
      description: ''
      operationId: editBrand
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Brands
          description: Brand string that needs to be edited
          required: true
          schema:
            $ref: '#/definitions/Brands'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Brand not found
        '405':
          description: Validation exception
        '200':
          description: successful
  /brands:
    get:
      tags:
        - brands
      summary: View all brands carried in store
      description: ''
      operationId: viewBrands
      consumes:
        - application/json
      produces:
        - application/json
      parameters: 
        - in: body
          name: Brands
          description: Array of brands in store
          schema:
            $ref: '#/definitions/Brands'
      responses: 
        '200':
          description: successful

  /product:
    post:
      tags:
        - products
      summary: Add a new product to the store
      description: ''
      operationId: addProduct
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Product object that gets added to the store
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses: 
        '200':
          description: successful
  /product/search:
    get:
      tags:
        - products
      summary: Search for products
      description: Search for products based on certain criteria
      operationId: searchProducts
      produces:
        - application/json
      parameters:
        - name: keyword
          in: query
          description: Keyword to search for in product names or descriptions
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Store'
        '404':
          description: No products found
  /product/{productId}:
    delete:
      tags:
        - products
      summary: Delete a product from the store
      description: ''
      operationId: deleteProduct
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of product object that gets deleted from the store
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Brand not found
        '405':
          description: Validation exception
        '200':
          description: successful
    put:
      tags:
        - products
      summary: Edit a product from the store
      description: ''
      operationId: editProducts
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of product object that gets edited from the store
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Brand not found
        '405':
          description: Validation exception
        '200':
          description: successful
  /products:
    get:
      tags:
        - products
      summary: View all products in the store
      description: ''
      operationId: viewProducts
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Array that holds all products
          required: true
          schema:
            $ref: '#/definitions/Store'
      responses: 
        '200':
          description: successful
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      consumes:
        - application/json
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
          schema:
            type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/json
        - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/cart:
    get:
      tags:
        - user
      summary: Get user's cart
      description: Retrieve the contents of the user's cart
      operationId: getUserCart
      produces:
        - application/json
      parameters:
          - name: username
            in: query
            description: The username to get the cart for
            required: true
            type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserCart'
        '404':
          description: User not found
  /user/cart/{username}:
    post:
      tags:
        - user
      summary: Add a product to the user's cart
      description: Add a product to the user's cart (requires authentication)
      operationId: addToUserCart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The username to add the product to the cart
          required: true
          type: string
        - in: body
          name: body
          description: Product object to add to the cart
          required: true
          schema:
            $ref: '#/definitions/Product'
        - name: Authorization
          in: header
          description: Authentication token
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '401':
          description: Unauthorized (user not logged in)
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Remove a product from the user's cart
      description: Remove a product from the user's cart (requires authentication)
      operationId: removeFromUserCart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The username to remove the product from the cart
          required: true
          type: string
        - name: productId
          in: query
          description: ID of the product to be removed
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
        '401':
          description: Unauthorized (user not logged in)
        '404':
          description: User or product not found

          
          
          
























definitions:
  Product:
    type: object
    required:
      - name
      - photoUrl
    properties:
      id:
        type: integer
        format: int64
      price: 
        type: integer
        example: 120
      brand:
        $ref: '#/definitions/Brand'
      style:
        type: string
        example: Beach
      description:
        type: string
        example: These sunglasses are good for the beach!
      color:
        type: string
        example: Blue
      photoUrl:
        type: string
        xml:
          wrapped: true
        items:
          type: string
          xml:
            name: photoUrl
      inventory:
        type: integer
        example: 2
  Brand:
    type: string
    example: Oakley
  Brands:
    type: array
    items: 
      $ref: '#/definitions/Brand'
  Store:
    type: array
    items: 
      $ref: '#/definitions/Product'
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
      loggedIn:
        type: boolean
        default: false
        description: Indicates whether the user is logged in or not
    xml:
      name: User
  CartItem:
    type: object
    properties:
      productId:
        type: integer
        format: int64
        description: ID of the product in the cart
      quantity:
        type: integer
        description: Quantity of the product in the cart
    xml:
      name: CartItem
  UserCart:
    type: object
    properties:
      username:
        type: string
        description: The username associated with the cart
      items:
        type: array
        items:
          $ref: '#/definitions/CartItem'
        description: List of items in the cart
    xml:
      name: UserCart