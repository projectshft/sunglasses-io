swagger: "2.0"
info:
  title: Sunglasses API
  description: An API to support the sunglasses platform
  version: 1.0.0
host: api.Sunglasses.com
schemes:
  - https
basePath: /v1/api
produces:
  - application/json
paths:
  /brands:
    get:
      tags:
        - "brands"
      summary: "Gets all the Brands"
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "Succesfull operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/brands"
        "400":
          description: "Invalid request"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/Error"
  /brands/{id}/products:
    get:
      tags:
        - "products"
      summary: "Finds products by brand id"
      description: "returns all the products associated with passed in brand id"
      operationId: "getProductsByBrandId"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "get all products related to brand id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "succesfull operation"
          schema:
            $ref: "#/definitions/products"
        "404":
          description: 'No products found for the brand Id'
  /products:
    get:
      tags:
        - "products"
      summary: "Gets all the products"
      description: ""
      produces: 
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/products"

        "400":
          description: "Invalid request"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/Error"
  /login:
    post:
      tags: 
        - "login"
      summary: "logs user in"
      description: "logs user in and generates access token"
      consumes:
        - "application/json"

      parameters:
        - in: "body"
          name: "login"
          schema:
            type: "string"
            required:
              - "username"
              - "password"
            properties:
              username:
                type: "string"
              password:
                type: "string"
      responses:
        "200":
          description: "successfull operation"
          schema:
            type: "string"
        "401":
          description: "Incorrect username or password"     
        "400":
          description: "Invalid inputs please fill out inputs correctly"
  /me/cart:
    get:
      tags: 
        - "cart"
      summary: "Gets the logged in users cart"
      description: ""
      operationId: "userCart"
      produces: 
      - "application/json"
      security:
        - BasicAuth: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/cart"
  /me/cart/{productId}:
    delete:
      tags:
        - "cart"
      summary: "Deletes the product from cart"
      operationId: "deleteItem"
      consumes:
      - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "get all products related to brand id"
          required: true
          type: "integer"
          format: "int64"
      security:
      - BasicAuth: []
      responses:
        "200":
          description: "item deleted"
        "404":
          description: "Item not found"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/Error"   
    post: 
      tags:
        - "cart"
      summary: "Adds a product to cart"
      operationId: "addItem"  
      consumes:
      - "application/json" 
      parameters:
        - name: "productId"
          in: "path"
          description: "get all products related to brand id"
          required: true
          type: "integer"
          format: "int64"
      security:
      - BasicAuth: []
      responses:
        "200":
          description: "Item added"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/cart"
        "404":
          description: "Item not found"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/Error"  

definitions:
  brands:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Oakley"
  products:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      brandId: 
        type: "integer"
        format: "int64"
      name:
       type: "string"
       description: "QDogs Glasses"
      description: 
        example: "They bark"
      price:
        type: "integer"
        format: "int64"
      imageUrls:
        type: "array"
        items:
         type: "string"
         description: "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg"
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: "string"
      fields:
        type: "string"
  cart:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      brandId: 
        type: "integer"
        format: "int64"
      name:
       type: "string"
       description: "QDogs Glasses"
      description: 
        example: "They bark"
      price:
        type: "integer"
        format: "int64"
      imageUrls:
        type: "array"
        items:
         type: "string"
         description: "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg"
      quantity:
        type: "integer"
        format: "int64"
        
securityDefinitions:
  BasicAuth:
    type: basic
