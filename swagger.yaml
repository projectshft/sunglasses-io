swagger: "2.0"
info:
  version: "0.1"
  title: Sunglasses.io API
  description: Open Source API og Sunglasses.io store
# during dev, should point to your local machine
host: localhost:8080
# basePath prefixes all resource paths 
basePath: /api
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /products:
    get:
      summary: Product Types
      description: |
        The Products endpoint returns information about the *Sunglasses* products
        offered at the online store. The response is a collection of all products that satisfy specified search criteria and other details about each product, and lists the products in the
        proper display order.
      parameters:
        - name: limit
          in: query
          description: Number of products returned, returns 5 by default.
          type: integer
          maximum: 50
          default: 5
        - name: product
          in: query
          description: Name of searched product, returns 5 by default.
          type: string
          required: true
      tags:
        - Products
      responses:
        200:
          description: Success, returned array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        404:
          description: Server has not found anything matching the Request
  /brands:
    get:
      summary: Brand Types
      description: |
        The Products endpoint returns information about the *Sunglasses* brands
        offered at the online store. The response includes the display name
        and other details about each brand.
      parameters:
        - in: query
          name: limit
          description: The numbers of items to return, returns 5 by default.
          type: integer
          default: 5
          maximum: 50
      tags:
        - Brands
      responses:
        200:
          description: An array of Brands
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
        404:
          description: Server has not found anything matching the Request
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /brands/{id}/products:
    get:
      summary: Sunglasses by Brand
      description: |
        The Products endpoint returns information about the *Sunglasses* 
        on a specific brand offered at the online store. 
        The response includes an array with details about the sunglasses.
      parameters:
        - name: id
          in: path
          type: integer
          description: The products to return by brand.
          required: true
      tags:
        - Brands
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        404:
          description: Server has not found anything matching the Request
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      produces:
        - application/json
      parameters:
        - in: body
          name: login
          required: true
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        200:
          headers:
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          description: Token(s) successfully created
          schema:
            $ref: '#/definitions/CreateToken'
        400:
          description: Bad request
        401:
          description: Invalid username/password supplied
  /me/cart:
    get:
      summary: Items in cart
      description: The User's Cart endpoint returns an array of products that are in the user's cart.
        This can only be done by the logged in user.
      tags:
        - User
      responses:
        200:
          description: Success, returned array of products in cart
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Bad request
        401:
          $ref: '#/responses/401'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - User
      summary: Add user's cart to checkout
      description: The User's Cart post endpoint returns the array of products that are in the user's cart.
        This can only be done by the logged in user.
      operationId: addProductIdToCart
      produces:
        - application/json
      parameters:
        - name: productId
          in: query  # Could be in path instead
          description: The id of the product that needs to be deleted
          required: true
          type: integer
      responses:
        201:
          description: Created
        401:
          $ref: '#/responses/401'
        400:
          description: Invalid product id supplied
        404:
          description: product not found
  /me/cart/{productId}:
    delete:
      tags:
        - User
      summary: Delete product from user's cart
      description: This can only be done by the logged in user.
      operationId: deleteProductId
      produces:
        - application/json
      parameters:
        - name: productId
          in: path #Could be in query instead, maybe
          description: The id of the product that needs to be deleted
          required: true
          type: integer
      responses:
        200:
          description: Success, delete product from cart array.
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
    post:
      tags:
        - User
      summary: Add product to user's cart
      description: This can only be done by the logged in user.
      produces:
        - application/json
      parameters:
      - name: productId
        in: path #Could be in query instead, maybe
        description: The id of the product that needs to be deleted
        required: true
        type: integer
      responses:
        400:
          $ref: '#/responses/400'
        404:
          description: Product not found
responses:
  400:
    description: Bad Request
    schema:
      $ref: "#/definitions/Error"
  401:
    description: Unauthorized (invalid token or credentials)
    schema:
      $ref: "#/definitions/Error"
definitions:
  UserLogin:
    type: object
    required:
      - username
      - password
    properties:
      accountCode:
        type: string
      password:
        type: string
  CreateToken:
    type: object
    properties:
      token:
        type: string
  Product:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a specific product. For example, Superglasses will have a different id than Sugar glasses.
      categoryId:
        type: string
        description: Unique identifier representing a specific product that belongs to a specific category. For example, Superglasses will have a different categoryId than Sugar glasses.
      name:
        type: string
        description: Display name of product.
      description:
        type: string
        description: Description of product.
      price:
        type: integer
        description: Price of product. For example, $100.
      imageUrls:
        type: string
        description: Image URL representing the product.
  Brand:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a specific brand. For example, Oakley will have a different id than Burberry.
      name:
        type: string
        description: Display name of product.
  PriceEstimate:
    type: object
    properties:
      product_id:
        type: string
        description: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
      currency_code:
        type: string
        description: "[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code."
      display_name:
        type: string
        description: Display name of product.
      estimate:
        type: string
        description: Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or "Metered" for TAXI.
      low_estimate:
        type: number
        description: Lower bound of the estimated price.
      high_estimate:
        type: number
        description: Upper bound of the estimated price.
      surge_multiplier:
        type: number
        description: Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
  Profile:
    type: object
    properties:
      first_name:
        type: string
        description: First name of the Uber user.
      last_name:
        type: string
        description: Last name of the Uber user.
      email:
        type: string
        description: Email address of the Uber user
      picture:
        type: string
        description: Image URL of the Uber user.
      promo_code:
        type: string
        description: Promo code of the Uber user.
  Activity:
    type: object
    properties:
      uuid:
        type: string
        description: Unique identifier for the activity
  Activities:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Activity'
  SuccessResponse:
    type: object
    properties:
      message:
        type: string
        example: OK
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  